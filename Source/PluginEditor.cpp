/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TheGeneralAudioProcessorEditor::TheGeneralAudioProcessorEditor (TheGeneralAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    
    
    //Signal Slider
    signalSlider.setSliderStyle(Slider::LinearVertical);
    signalSlider.setColour(Slider::ColourIds::thumbColourId, Colours::white);
    signalSlider.setRange(0.0, 4.0, 1.0);
    if (processor.isInitialState) signalSlider.setValue(0.0);
    signalSlider.setSize(10, 200);
    signalSlider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    signalSlider.setName("signalSlider");
    signalSlider.addListener(this);
    addAndMakeVisible(&signalSlider);
    
    // General Frequency
    generalFequencySlider.setSliderStyle(Slider::LinearHorizontal);
    generalFequencySlider.setColour(Slider::ColourIds::thumbColourId, Colours::white);
    generalFequencySlider.setRange(20.0, 12000.0, 1.0);
    if (processor.isInitialState) generalFequencySlider.setValue(440.0);
    generalFequencySlider.setSize(160, 10);
    generalFequencySlider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    generalFequencySlider.setName("generalFequencySlider");
    generalFequencySlider.addListener(this);
    addAndMakeVisible(&generalFequencySlider);
    
    //Volume slider
    volumeSlider.setSliderStyle (Slider::Rotary);
    volumeSlider.setColour(Slider::ColourIds::rotarySliderOutlineColourId, Colours::slategrey);
    volumeSlider.setColour(Slider::ColourIds::rotarySliderFillColourId, Colours::white);
    volumeSlider.setRange(0.0, 1.0, 0.01);
    volumeSlider.setTextValueSuffix ("MainVolume");
    volumeSlider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    if (processor.isInitialState) volumeSlider.setValue(0.8);
    volumeSlider.setName("volumeSlider");
    volumeSlider.addListener(this);
    addAndMakeVisible(&volumeSlider);
    
    //on off slider
    onOffSlider.setSliderStyle(Slider::LinearHorizontal);
    onOffSlider.setColour(Slider::ColourIds::thumbColourId, Colours::white);
    onOffSlider.setRange(0.0, 1.0, 1.0);
    if (processor.isInitialState) onOffSlider.setValue(0.0);
    onOffSlider.setSize(30, 100);
    onOffSlider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    onOffSlider.setName("onOffSlider");
    onOffSlider.addListener(this);
    addAndMakeVisible(&onOffSlider);
    
    
    
}

TheGeneralAudioProcessorEditor::~TheGeneralAudioProcessorEditor()
{
}

//==============================================================================
void TheGeneralAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::grey,
                                       0,
                                       0,
                                       Colours::black,
                                       0,
                                       (float) getHeight(),
                                       false));
    g.fillAll ();
    g.setColour (Colours::white);
    g.setFont (15.0f);
    
    //Title
    g.drawFittedText("the General", 0, 0, getWidth(), 30, Justification::right, 1);
    
    //Signal control
    g.drawFittedText("DC Step", 30, 45, 170, 20, Justification::left, 1);
    g.drawFittedText("Nyquist", 30, 90, 170, 20, Justification::left, 1);
    g.drawFittedText("1/2 Nyquist", 30, 140, 170, 20, Justification::left, 1);
    g.drawFittedText("1/4 Nyquist", 30, 185, 170, 20, Justification::left, 1);
    g.drawFittedText("Impulse", 30, 230, 170, 20, Justification::left, 1);
    
    //right
    g.drawFittedText("Gen. freq.", 200, 50, 200, 20, Justification::centred, 1);
    g.drawFittedText("Main vol", 200, 90, 200, 20, Justification::centred, 1);
    
    g.drawFittedText("OFF", 230, 190, 40, 20, Justification::right, 1);
    g.drawFittedText("ON", 320, 180, 40, 20, Justification::left, 1);
    
    /*
    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!", getLocalBounds(), Justification::centred, 1);*/
}

void TheGeneralAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    signalSlider.setBounds(10, 50, 20, 200);
    generalFequencySlider.setBounds(200, 70, 20, 200);
    volumeSlider.setBounds(200, 110, 200, 40);
    onOffSlider.setBounds(280, 150, 40, 20);
    
}


void TheGeneralAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    if (slider->getName()=="signalSlider"){
        
    }
    else if (slider->getName()=="generalFequencySlider"){
        
    }
    else if (slider->getName()=="volumeSlider"){
        
    }
    else if (slider->getName()=="onOffSlider"){
        
    }
}
